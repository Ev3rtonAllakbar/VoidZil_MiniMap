// ==UserScript==
// @name         LINEAR GOSTOZO
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  try to take over the world!
// @author       You
// @match        http://pixelzone.io/*
// @grant        none
// ==/UserScript==

// also the colors may be fucked up.
// it's best to feed a file with the
// color pallette from pixelzone

// first run?

amount = 1;
IamCaptcha = true;
COORDENADA_X = false;
COORDENADA_Y = false;
COORDENADA_XW = false;
COORDENADA_YW = false;
//

var colors = [
    [38, 38,38],  // Dark Grey
    [ 0,0,0],  // Black
    [128,128,128],  // Light Grey
    [255,255,255],  // White
    [153,98,61],  // Brown
    [255,163,200],  // Pink
    [207,115,230],  // Light Purple
    [128,0,128],  // Purple
    [229,0,0],  // Red
    [229,137,0],  // Orange
    [229,229,0],  // Yellow
    [150,230,70],  // Light Green
    [0,190,0],  // Green
    [0,230,230],  // Cyan
    [0,136,204],  // Teal
    [0,0,230]   // Blue
];

function rounded(num) {
	return Math.round(num);
}

function compare_colors(col1, col2) { // [r1, g1, b1], [r2, g2, b2]
	var [r1, g1, b1] = col1;
	var [r2, g2, b2] = col2;
	var diff1, diff2, diff3;
	diff1=Math.abs(r1-r2); diff2=Math.abs(g1-g2); diff3=Math.abs(b1-b2);
	var result = rounded( 100 - (diff1+diff2+diff3)/(3*255) * 100 );
	return result;
}

function findClosestColor(col) {
	return colors.map((c,i) => [compare_colors(col,c), i]).sort(function compare(a,b) {
		if (a[0] < b[0]) { // (a is less than b by some ordering criterion) {
			return -1;
		}
		if (a[0] > b[0]) { //(a is greater than b by the ordering criterion) {
			return 1;
		}
		// a must be equal to b
		return 0;
	}).reverse()[0][1];
}

var w = {
	delay: 3,
	worldSize: 8192,
	chunkSize: 512
};

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

var paused_by_queue = false;
var ws, _send = WebSocket.prototype.send, queue = [];
//var _send = WebSocket.prototype.send, n;
WebSocket.prototype.send = async function f() { // function f() { // async function() {
    _send.apply(this, arguments);
    //console.warn("sent", arguments[0]);

    if(!ws || (ws != this)) {
        ws = this;
        ws.addEventListener("message", function(e) {
            var data = e.data;
            if(data.startsWith('42["placePixel"')) {
            	pixelData = data.substring(16, data.length - 1);
            	Xy = ((pixelData >> 17) - w.worldSize / 2);
            	Yx = ((131056 & pixelData) >> 4) - w.worldSize / 2;
            	Corlol = (15 & pixelData);
            	if(isNaN(COORDENADA_X) == true && isNaN(COORDENADA_Y) == true && isNaN(COORDENADA_XW) == true && isNaN(COORDENADA_YW) == true) return;
            	else {
            		if(Xy >= COORDENADA_X && Xy <= COORDENADA_XW && Yx >= COORDENADA_Y && Yx <= COORDENADA_YW) {
            			console.log("[STATUS] Pixel placed at X: " + Xy + " Y: " + Yx + " Corlol: " + Corlol);
            			var pixelArray = copier.canvas.getContext('2d').getImageData(Xy - Xy, Yx - Yx, 1, 1).data;
            			Getulix = findClosestColor("rgb(" + pixelArray[0] + "," + pixelArray[1] + "," + pixelArray[2] + ")");
            			AoBobina = Colors.getColorStrFromRGB(colors[Getulix]);
            			console.log("[COR TEMPLATE] " + AoBobina);
            		}
            	}
            }
            if(data.startsWith('42["placePixel"') || data.startsWith('42["chunkData"')) return;
            if(data.startsWith('42["captchaTest"]')) {
            	console.log("A new captchas has apparead!");
            	amount++;
            	IamCaptcha = true;
            }
            //console.warn(data);
        });
        if(queue.length) {
            paused_by_queue = true;
            for(var s in queue) {
            	console.log("Hakuna Nakaktkapra: " + s);
                this.send(s);
                await sleep(w.delay * 1000);
            }
            queue = [];
            paused_by_queue = false;
        }
    }
};

function setPixel(x, y, rgb) {
	//console.log(IamCaptcha)
	if(IamCaptcha == true) {
		setTimeout(() => {
			setPixel(x, y, rgb);
		}, 10000)
	}
	else {
		// o = blockX/tileX, r = blockY/tileY, only used for checking current value of pixel
		var o = x % w.chunkSize, r = y % w.chunkSize, s, i; // o = 303, r = 442, s = Uint8ClampedArray(4) [0, 0, 0, 255], i = "rgb(0, 0, 0)"
		if(o < 0) o += w.chunkSize;
		if(r < 0) r += w.chunkSize; // r = 442
		// s = (old) value of pixel on screen; m = Math.floor
		var m = Math.floor;
		s = selector.world.tiledCanvas.chunks[m(x / w.chunkSize)][m(y / w.chunkSize)].canvas.getContext("2d").getImageData(o, r, 1, 1).data;
		// s = U.tiledCanvas.chunks[m(x / w.chunkSize)][m(y / w.chunkSize)].canvas.getContext("2d").getImageData(o, r, 1, 1).data, // s = Uint8ClampedArray(4) [0, 0, 0, 255], x = -209, y = -70, o = 303
		i = Colors.getColorStrFromRGB(s); // i = "rgb(0, 0, 0)"
		// U.setPixel displays pixel on actual canvas

		var colorId = findClosestColor(rgb);
		var colCSS = Colors.getColorStrFromRGB(colors[colorId]);


		//console.log(colorId);
		//console.log(colCSS);
		if(i == colCSS) { //M.currentColor) {
			return false;
		}

		var weirdNumToSend = (x + w.worldSize / 2 << 13 | y + w.worldSize / 2) << 4 | colorId;
		var pkt = '42["placePixel",' + weirdNumToSend + ']';
		if(!ws || (ws.readyState != WebSocket.OPEN)) return queue.push(pkt);
		ws.send(pkt);
	    selector.world.setPixel(x, y, colCSS); // wtf 18
	    console.log("[Coordx: " + x + "] [Coordy: " + y + "] [Cor: " + colCSS + "]")

	    document.getElementById("last_pixel").innerHTML = "X: " + x + " Y: " + y + " Cor: " + colCSS

		return true;
	}
	
}

var i,j,_i,_j,i_max,j_max,canDraw,draw;
function drawImg(context, width, height){
	// i = Math.floor((parseInt(document.getElementById("inputX").value)||0)-width / 2); //starting x-value
	// j = Math.floor((parseInt( document.getElementById("inputY").value)||0)-height / 2); //starting y-value
	i = (parseInt(document.getElementById("inputX").value)||0); //starting x-value
	COORDENADA_X = i;
	j = (parseInt( document.getElementById("inputY").value)||0); //starting y-value
	COORDENADA_Y = j;
	_i = i;
	_j = j;
	i_max = i + width;
	COORDENADA_XW = i_max;
	j_max = j + height;
	COORDENADA_YW = j_max;
	// canDraw=OWOP.net.protocol.placeBucket.canSpend(1);

    draw = setInterval(updateDraw, 4000,context); // setInterval(updateDraw, 20,context);

}
var stop = false
function updateDraw(context){
	if(stop == true){
		console.log("off")
	} else {
		if(paused_by_queue)
			return console.log("placing pixels that were supposed to be placed while offline");
		var continue_ = true;
		while(continue_) {
			var pixelArray = context.getImageData(i - _i, j - _j, 1, 1).data;
			//console.log(pixelArray[3]);
			if (pixelArray[3] > 25){
				// OWOP.net.protocol.updatePixel(i, j,pixelArray);
				continue_ = !setPixel(i, j,pixelArray);
				console.log("loop")
			}
			i++;
			if (i > i_max){
				j++;
				i = _i;
			}
			if (j > j_max){
				return clearInterval(draw);
			}
		}
	}
}
copier = {};
copier.maxHeight = 50;
copier.maxWidth = 50;
copier.img = new Image();
copier.img.onload = function() {
	copier.canvas = document.createElement('canvas');
	copier.canvas.width = this.width;
	copier.canvas.height=this.height;
	copier.ctx = copier.canvas.getContext('2d');
	copier.ctx.drawImage(copier.img, 0, 0, copier.canvas.width, copier.canvas.height);
};
function encodeImageFile(){
    var filesSelected = document.getElementById("inputFileToLoad").files;
    if (filesSelected.length > 0){
		var fileToLoad = filesSelected[0];
		var fileReader = new FileReader();
		fileReader.onload = function(fileLoadedEvent) {
			let src = fileLoadedEvent.target.result;
			copier.img.src = src;
            console.log(src);
		};
    }
	fileReader.readAsDataURL(fileToLoad);
}
(function styleInit() {
	var head=document.getElementsByTagName('head')[0];
        if (!head) {
            return;
        }
    addGlobalStyle(`#styleSetting{padding: 0.2em; margin:0.2em;
    position: absolute;left: 4em;top: 1em;width: 40%;
    background-color: rgba(0,200,200,0.1);display:block;z-index: 2;}
    table{text-align: center; width: 100%; height: 80%;}
    td{padding: 0px 0.3em;border: 1px solid black;}`);
    function addGlobalStyle(css) {
        style = document.createElement('style');
        style.type = 'text/css';
        style.innerHTML = css;
        head.appendChild(style);
    }
})();
var temp = `<div id="styleSetting"><table>
<tr><td><input id="inputFileToLoad" type="file" onchange="encodeImageFile();" />
</td></tr><tr><td rowspan=2>

<div><span id="last_pixel" style="font-size: 14px;">Aguardando...</span></div>
<br><input id="start" type="button" value="Start">
<input id="stop" type="button" value="Stop""><br>
<input id="inputX" type="number" placeholder="X">
<input id="inputY" type="number" placeholder="Y"></td></tr>
<audio id="start_audio" src="http://autowork-esy-es.000webhostapp.com/StartSound.mp3"></audio>
<tr><td></td></tr></table></div>`;
document.querySelector('body').insertAdjacentHTML('beforeend', temp);
document.getElementById("inputFileToLoad").onchange=encodeImageFile;


//drawImg(copier.canvas.getContext('2d'), copier.canvas.width, copier.canvas.height);

document.getElementById("start").onclick = function() {
    var filesSelected = document.getElementById("inputFileToLoad").files;
    if (filesSelected.length > 0){
		stop = false
                document.getElementById('start_audio').play();
                getCaptcha();
                if(IamCaptcha == true) {
                	IamCaptchaInterval = setInterval(() => {
                		if(IamCaptcha == false) {
                			clearInterval(IamCaptchaInterval);
                			console.log("Iniciando Bot")
                			drawImg(copier.canvas.getContext('2d'), copier.canvas.width, copier.canvas.height);
                		}
                	}, 5000);
                }
                
                
    } else document.getElementById("last_pixel").innerHTML = "..."
};

document.getElementById("stop").onclick = function() {
    document.getElementById("last_pixel").innerHTML = "Bot Parado"
    stop = true
};

//[Coordx: -3018.5] [Coordy: 982.5] [Cor: rgb(255, 255, 255)]

//[Coordx: -3000.5] [Coordy: 1000.5] [Cor: rgb(255, 255, 255)]

// Doing v. 2.77

function getCaptcha(){
	setInterval(() => {
		//console.log("test");
		if(amount == 0) return;
		var xhr = new XMLHttpRequest();

	    var url = "http://brdef.000webhostapp.com/captchashaha.php";
	    xhr.open("POST", url, true);
	    xhr.onreadystatechange = function () {
	        if (xhr.readyState === 4 && xhr.status === 200) {
	            var json = JSON.parse(xhr.responseText);
	            console.log(json);
	            if(json.token) {
	                ws.send('42["captcha",{"token":"'+json.token+'"}]');
	                //queue.push(pkt);
	                IamCaptcha = false;
	                amount--;
	        }
	    };
		}
	    var data = JSON.stringify({"apikey": "hitlerdindunuffin","amount": amount});
	    setTimeout(xhr.send(data),200);

	}, 10000)
}

